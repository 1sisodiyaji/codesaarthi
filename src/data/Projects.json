,
    {
        "id": "3",
        "title": "JAVA",
        "description": "Whether you're a beginner or seeking to enhance your skills, mastering HTML is crucial for anyone interested in web development. Start your journey...",
        "thumbnailImage": "https://res.cloudinary.com/dbqq41bpc/image/upload/v1718958922/codesaarthi/article-1718958916242.png",
        "topics": [
            {
                "id": 1,
                "topic": "Introduction to Java",
                "description": `<h5>Java is a class based , object oriented Programming Language  at having some dependecies .</h5> <p> The main fetures of java is it support <strong> WORA </strong> (Write once run Anywhere) Dues its Environment that it provides . </p> 
            <img class ="img-fluid"  src = "https://codesaarthi.com/img/java1.png"> <br/> <br/>
            <p><strong>History and Features of Java:</strong> Java is a high-level, class-based, object-oriented programming language that is designed to have as few implementation dependencies as possible. It was developed by <strong>James Gosling </strong> at <strong> Sun Microsystems </strong>, which is now a subsidiary of <strong> Oracle Corporation </strong>. The language was initially released in 1995 and has since become one of the most popular programming languages in use.</p>\n<p>Key features of Java include:</p>\n<ul>\n<li>Platform Independence: Write once, run anywhere (WORA) capability due to the Java Virtual Machine (JVM).</li>\n<li>Object-Oriented: Supports principles of OOP such as inheritance, encapsulation, and polymorphism.</li>\n<li>Robust and Secure: Java provides strong memory management and security features.</li>\n<li>Multi-threaded: Supports concurrent programming and multi-threading capabilities.</li>\n<li>High Performance: Just-In-Time (JIT) compilers and performance optimizations.</li>\n</ul>\n<p><strong>Installing Java Development Kit (JDK):</strong> To start developing Java applications, you need to install the Java Development Kit (JDK). The JDK includes the Java Runtime Environment (JRE), an interpreter/loader (Java), a compiler (javac), an archiver (jar), a documentation generator (Javadoc), and other tools needed for Java development. <a href = "https://www.oracle.com/in/java/technologies/downloads/" target = "blank" >Click Here </a> </p>\n<p>Steps to install JDK:</p>\n<ol>\n<li>Download the JDK from the official Oracle website or OpenJDK.</li>\n<li>Follow the installation instructions specific to your operating system.</li>\n<li>Set the PATH environment variable to include the JDK bin directory.</li>\n</ol>\n<p><strong>Setting Up the Development Environment:</strong> After installing the JDK, you can set up your development environment. Popular Integrated Development Environments (IDEs) for Java development include:</p>\n<ul>\n
            <li>Eclipse: A free, open-source IDE with extensive plugins and features. <a href = " https://www.eclipse.org/downloads/ " target= "blank" > <i class="fi fi-rr-arrow-up-right-from-square text-success"> </i> </a> </li>\n
            <li>IntelliJ IDEA: A powerful IDE with both a free Community edition and a paid Ultimate edition. <a href = " https://www.jetbrains.com/idea/download/ " target= "blank" > <i class="fi fi-rr-arrow-up-right-from-square text-success"></i> </a> </li>\n
            <li>NetBeans: Another free, open-source IDE supported by Oracle. <a href = " https://netbeans.apache.org/front/main/download/ " target= "blank" > <i class="fi fi-rr-arrow-up-right-from-square text-success"></i> </a> </li>\n
            </ul>\n<p>These IDEs provide tools for writing, debugging, and testing Java applications, making development easier and more efficient.</p>`
            },
            {
                "id": 2,
                "topic": "Basic Java Syntax",
                "description": `<p> Before learning more syntax in java lets start our first program  .<p/> <p><strong>Writing Your First Java Program:</strong> Let's start by writing a simple Java program that prints 'Namaste Duniya' to the console. Here is the code:</p>\n<pre><code>public class NamasteDuniya {\n    public static void main(String[] args) {\n        System.out.println(\"Namaste Duniya\");\n    }\n}</code></pre>\n<p>This code defines a class named <code>NamasteDuniya</code> with a main method. The main method is the entry point of any Java application. The <code>System.out.println</code> statement prints the text to the console.</p>\n<p><strong>Understanding the Java Program Structure:</strong> A typical Java program consists of the following components:</p>\n<ul>\n<li><strong>Class:</strong> The blueprint from which individual objects are created. In our example, <code>NamasteDuniya</code> is a class.</li>\n<li><strong>Methods:</strong> Blocks of code that perform a specific task. The <code>main</code> method is a special method that serves as the entry point of the program.</li>\n<li><strong>Statements:</strong> Instructions that the Java virtual machine executes. <code>System.out.println</code> is a statement that prints a message to the console.</li>\n</ul>\n<p><strong>Data Types, Variables, and Constants:</strong> Java has several data types, including:</p>\n<ul>\n<li><strong>Primitive Data Types:</strong> byte, short, int, long, float, double, char, boolean.</li>\n<li><strong>Non-primitive Data Types:</strong> Strings, Arrays, Classes, Interfaces, etc.</li>\n</ul>\n<p>Variables are containers for storing data values. For example:</p>\n<pre><code>int number = 10;\nString name = \"John\";</code></pre>\n<p>Constants are variables whose values cannot be changed once assigned. They are declared using the <code>final</code> keyword:</p>\n<pre><code>final int MAX_VALUE = 100;</code></pre>\n<p>These are the basics of Java syntax. Understanding these fundamentals will help you write more complex Java programs.</p>\n<p><strong>Images:</strong></p>\n<p><img src='https://d3n0h9tb65y8q.cloudfront.net/public_assets/assets/000/002/676/original/Java_Collections.png?1643450544' class="imageHeight" alt='interview bit reference'></p>\n<p>These are the some of them way of describing the java syntax as working structure of java there are alot more java syntax . Here is the link <a href="https: //www.tutorialspoint.com/java/java_basic_syntax.htm" target = "blank" > <i class="fi fi-rr-arrow-up-right-from-square text-success pe-1"></i> </a>  mentioned to check out the java syntax .</p>`
                    },
                    {
                        "id": 3,
                        "topic": "Control Flow Statements",
                        "description": "Control Flow system basically means the syntax which will help to get more control over the code as like conditional Statemenets Looping system .  <br><p><strong>Conditional Statements:</strong> Conditional statements in Java include <code>if</code>, <code>else</code>, and <code>switch</code> statements. These statements allow your program to make decisions and execute certain parts of the code based on conditions.</p>\n<p><strong>If Statement Example:</strong></p>\n<pre><code>int num = 10;\nif (num > 0) {\n    System.out.println(\"The number is positive.\");\n}</code></pre>\n<p><strong>Switch Statement Example:</strong></p>\n<pre><code>int day = 3;\nswitch (day) {\n    case 1:\n        System.out.println(\"Monday\");\n        break;\n    case 2:\n        System.out.println(\"Tuesday\");\n        break;\n    case 3:\n        System.out.println(\"Wednesday\");\n        break;\n    default:\n        System.out.println(\"Invalid day\");\n}</code></pre>\n<p><strong>Looping Constructs:</strong> Looping constructs in Java include <code>for</code>, <code>while</code>, and <code>do-while</code> loops. These constructs allow your program to execute a block of code multiple times. Basically in this lopping system the code will run multiple times at certain limit that we decide . </p>\n<p><strong>For Loop Example:</strong></p>\n<pre><code>for (int i = 0; i < 5; i++) {\n    System.out.println(i);\n}</code></pre>\n <p> Solution :- 0 1 2 3 4 </p> <p><strong>While Loop Example:</strong></p>\n<pre><code>int i = 0;\nwhile (i < 5) {\n    System.out.println(i);\n    i++;\n}</code></pre>\n <p> Solution :- 0 1 2 3 4 </p> <p><strong>Do-While Loop Example:</strong></p>\n<pre><code>int i = 0;\ndo {\n    System.out.println(i);\n    i++;\n} while (i < 5);</code></pre>\n <p> Solution :- 0 1 2 3 4 </p> <p>Understanding and using control flow statements effectively will help you manage the execution flow of your Java programs.</p>"
                    },
                    {
                        "id": 4,
                        "topic": "Object-Oriented Programming",
                        "description": `<p><strong>Introduction to OOP Concepts :</strong> Java is an object-oriented programming language that uses OOP principles to design and develop programs. The main concepts of OOP include:</p>\n<ul>\n<li><strong>Classes and Objects:</strong> A class is a blueprint for objects. An object is an instance of a class.</li>\n<li><strong>Inheritance:</strong> Inheritance allows a class to inherit properties and methods from another class.</li>\n<li><strong>Polymorphism:</strong> Polymorphism allows methods to perform different tasks based on the object that invokes them.</li>\n<li><strong>Encapsulation:</strong> Encapsulation restricts direct access to some of an object's components, which can be achieved using access modifiers.</li>\n<li><strong>Abstraction:</strong> Abstraction allows you to hide complex implementation details and show only the essential features of the object.</li>\n</ul>\n<p><strong>Classes and Objects:</strong></p>\n<p>In Java, a class is a template for creating objects. Here's an example:</p>\n<pre><code>class Animal {\n    String name;\n    void eat() {\n        System.out.println(\"This animal eats food.\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Animal dog = new Animal();\n        dog.name = \"Buddy\";\n        dog.eat();\n    }\n}</code></pre>\n<p>In this example, <code>Animal</code> is a class with a field <code>name</code> and a method <code>eat</code>. We create an object <code>dog</code> of class <code>Animal</code> and use it to call the <code>eat</code> method.</p>\n<p></p>\n<p><img src='https://media.geeksforgeeks.org/wp-content/uploads/20230515233145/Classes-and-Objects-in-java-2-768.webp' class = "imageHeight img-fluid" alt='Geeks for geeks reference'></p>\n<p><strong>Inheritance:</strong></p>\n<p>Inheritance allows a class to inherit properties and methods from another class. Here's an example:</p>\n<pre><code>class Animal {\n    void eat() {\n        System.out.println(\"This animal eats food.\");\n    }\n}\n\nclass Dog extends Animal {\n    void bark() {\n        System.out.println(\"The dog barks.\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Dog dog = new Dog();\n        dog.eat(); // Inherited method\n        dog.bark();\n    }\n}</code></pre>\n<p>In this example, the <code>Dog</code> class inherits the <code>eat</code> method from the <code>Animal</code> class.</p>\n<p><img src='https://miro.medium.com/v2/resize:fit:904/1*rddNpQyOeBl_jQ3Rmet5dg.png' alt='Medium refrence' class = "img-fluid imageHeight" ></p>\n<p><strong>Polymorphism:</strong></p>\n<p>Polymorphism allows methods to perform different tasks based on the object that invokes them. Here's an example:</p>\n<pre><code>class Animal {\n    void sound() {\n        System.out.println(\"This animal makes a sound.\");\n    }\n}\n\nclass Dog extends Animal {\n    void sound() {\n        System.out.println(\"The dog barks.\");\n    }\n}\n\nclass Cat extends Animal {\n    void sound() {\n        System.out.println(\"The cat meows.\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Animal myDog = new Dog();\n        Animal myCat = new Cat();\n        myDog.sound();\n        myCat.sound();\n    }\n}</code></pre>\n<p>In this example, the <code>sound</code> method performs differently depending on whether it's called on a <code>Dog</code> or a <code>Cat</code> object.</p>\n<p><img src='https://media.geeksforgeeks.org/wp-content/uploads/20230127192347/Types-of-poymorphism.png' class = "imageHeight img-fluid "  alt='Polymorphism Diagram Geeks for geeks'></p>\n<p><strong>Encapsulation:</strong></p>\n<p>Encapsulation restricts direct access to some of an object's components. This can be achieved using access modifiers. Here's an example:</p>\n<pre><code>class Person {\n    private String name;\n    private int age;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        if (age > 0) {\n            this.age = age;\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Person person = new Person();\n        person.setName(\"John\");\n        person.setAge(30);\n        System.out.println(\"Name: \" + person.getName());\n        System.out.println(\"Age: \" + person.getAge());\n    }\n}</code></pre>\n<p>In this example, the <code>Person</code> class uses private fields and public getter and setter methods to control access to its data.</p>\n<p><img src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQkr44FUZpYk1luXfLVj50muiQDdwxsotAlrwhfKirc-A&s' alt='Encapsulation Diagram algo daily' class = "imageHeight img-fluid" ></p>\n<p><strong>Abstraction:</strong></p>\n<p>Abstraction allows you to hide complex implementation details and show only the essential features of the object. Here's an example:</p>\n<pre><code>abstract class Animal {\n    abstract void makeSound();\n}\n\nclass Dog extends Animal {\n    void makeSound() {\n        System.out.println(\"The dog barks.\");\n    }\n}\n\nclass Cat extends Animal {\n    void makeSound() {\n        System.out.println(\"The cat meows.\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Animal myDog = new Dog();\n        Animal myCat = new Cat();\n        myDog.makeSound();\n        myCat.makeSound();\n    }\n}</code></pre>\n<p>In this example, the <code>Animal</code> class is abstract, and it defines an abstract method <code>makeSound</code>. The <code>Dog</code> and <code>Cat</code> classes provide implementations for this method.</p>\n<p><img src='https://www.theknowledgeacademy.com/_files/images/Abstraction_in_Java.png' alt='Abstraction Diagram the knowledge academy ' class = "imageHeight img-fluid "></p>`
                            },
                            {
                                "id": 5,
                                "topic": "Java Data Structures",
                                "description": `<p>Data structures in Java are ways to organize and store data efficiently. They include arrays, linked lists, stacks, queues, trees, and hash tables, enabling efficient data manipulation and retrieval.</p>\n<p><strong>Arrays:</strong> Arrays are fixed-size data structures that hold elements of the same data type. Here's an example:</p>\n<pre><code>int[] numbers = {
                                    1,
                                    2,
                                    3,
                                    4,
                                    5
                                };\nSystem.out.println(numbers[
                                    0
                                ]); // Output: 1</code></pre>\n<p><img src='https://cdn.programiz.com/sites/tutorial2program/files/Java-Collections.png' alt='collection framework referred by programmiz' class='imageHeight img-fluid'></p>\n<p><strong>Collections Framework:</strong> The Collections Framework provides a set of classes and interfaces for storing and manipulating groups of data as a single unit. It includes:</p>\n<ul>\n<li><strong>List:</strong> An ordered collection (e.g., <code>ArrayList</code>, <code>LinkedList</code>).</li>\n<li><strong>Set:</strong> A collection that does not allow duplicate elements (e.g., <code>HashSet</code>, <code>TreeSet</code>).</li>\n<li><strong>Map:</strong> A collection of key-value pairs (e.g., <code>HashMap</code>, <code>TreeMap</code>).</li>\n</ul>\n<p><strong>Example of List:</strong></p>\n<p>An <code>ArrayList</code> is a resizable array. Here's an example:</p>\n<pre><code>import java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<String> fruits = new ArrayList<>();\n        fruits.add(\"Apple\");\n        fruits.add(\"Banana\");\n        fruits.add(\"Orange\");\n        System.out.println(fruits.get(1)); // Output: Banana\n    }\n}</code></pre>\n<p><img src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTAGhhUXMy-Xbb_s5xwWoO6C5YnEK0hkDKQn0xz0uuuhz6-WAd9CcFml1m7xkVxxJfxemc&usqp=CAU' class = "imageHeight img-fluid " alt='ArrayList Example callicoder' class='imageHeight img-fluid'></p>\n<p><strong>Example of Set:</strong></p>\n<p>A <code>HashSet</code> does not allow duplicate elements. Here's an example:</p>\n<pre><code>import java.util.HashSet;\nimport java.util.Set;\n\npublic class Main {\n    public static void main(String[] args) {\n        Set<String> uniqueNumbers = new HashSet<>();\n        uniqueNumbers.add(\"One\");\n        uniqueNumbers.add(\"Two\");\n        uniqueNumbers.add(\"Two\"); // Duplicate, will not be added\n        System.out.println(uniqueNumbers.size()); // Output: 2\n    }\n}</code></pre>\n<p><img src='https://www.edureka.co/blog/wp-content/uploads/2017/05/types-of-sets.png' alt='HashSet Example edureka' class='imageHeight img-fluid'></p>\n<p><strong>Example of Map:</strong></p>\n<p>A <code>HashMap</code> stores key-value pairs. Here's an example:</p>\n<pre><code>import java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        Map<String, Integer> ages = new HashMap<>();\n        ages.put(\"Alice\", 30);\n        ages.put(\"Bob\", 25);\n        ages.put(\"Charlie\", 35);\n        System.out.println(ages.get(\"Alice\")); // Output: 30\n    }\n}</code></pre>\n<p><img src='https://www.programiz.com/sites/tutorial2program/files/java-map-subinterfaces.png' alt='HashMap Example programiz' class='imageHeight img-fluid'></p>
            
            <p><strong>Generics:</strong> Generics allow you to define classes, interfaces, and methods with a placeholder for types. This ensures type safety and reduces the risk of runtime errors. Example:</p>\n<pre><code>ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();\nlist.add(\"Hello\");\nString greeting = list.get(0);</code></pre>\n<p>Understanding Java data structures helps you manage and organize your data efficiently, making your programs more robust and easier to maintain.</p>\n`
                            },
                            {
                                "id": 6,
                                "topic": "Exception Handling",
                                "description": `<p> Exception handling in Java is a mechanism to handle runtime errors, allowing the program to continue running. It uses try, catch, finally, and throw blocks. try contains code that might throw an exception, catch handles the exception, finally executes code regardless of an exception, and throw manually triggers an exception. </p> <p><strong>Types of Exceptions:</strong> Exceptions are events that disrupt the normal flow of the program. Java categorizes exceptions into:</p>\n<ul>\n<li><strong>Checked Exceptions:</strong> Exceptions that are checked at compile time (e.g., <code>IOException</code>).</li>\n<li><strong>Unchecked Exceptions:</strong> Exceptions that occur at runtime (e.g., <code>ArithmeticException</code>).</li>\n<li><strong>Errors:</strong> Serious problems that a reasonable application should not try to catch (e.g., <code>OutOfMemoryError</code>).</li>\n</ul>\n<p> <img src = "https://media.geeksforgeeks.org/wp-content/uploads/20230714113547/Exceptions-in-Java-1-768.png" class = "imageHeight img-fluid " alt = "Geeks for Geeks image referal " > <br/> </p> <p>  Ways to deal with Exception are mainly done in some of the types of blocks like try catch ,finally blocks , where the error could solve in way that it will not throw any error or unusal behaviour .  </p> <p><strong>Try, Catch, Finally Blocks:</strong> These blocks handle exceptions and ensure that code runs smoothly:</p>\n<pre><code>try {\n    int result = 10 / 0;\n
                                } catch (ArithmeticException e) {\n    System.out.println(\"Cannot divide by zero\");\n} finally {\n    System.out.println(\"This will always execute\");\n}</code></pre>\n<p><strong>Throw and Throws Keywords:</strong> The <code>throw</code> keyword is used to explicitly throw an exception, while the <code>throws</code> keyword indicates that a method might throw an exception:</p>\n<pre><code>void checkAge(int age) throws Exception {\n    if (age < 18) {\n        throw new Exception(\"Age must be at least 18\");\n    }\n}</code></pre>\n<p><strong>Custom Exceptions:</strong> You can create your own exceptions by extending the <code>Exception</code> class:</p>\n<pre><code>class CustomException extends Exception {\n    CustomException(String message) {\n        super(message);\n    }\n}</code></pre>\n<p>Proper exception handling ensures your program can deal with unexpected events gracefully and continue functioning.</p>\n`
                                },
                                {
                                    "id": 7,
                                    "topic": "Java I/O",
                                    "description": `<p>Java I/O (Input/Output) is a mechanism to read data from and write data to various sources, such as files, networks, and memory. It includes streams, readers, and writers for handling different data types.</p>\n<p><strong>Example:</strong></p>\n<pre><code>import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class FileReadExample {\n    public static void main(String[] args) {\n        try (BufferedReader reader = new BufferedReader(new FileReader(\"example.txt\"))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                System.out.println(line);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}</code></pre>\n<p><img src='https://via.placeholder.com/150' alt='Java I/O Example' class='imageHeight img-fluid'></p>
            <p><strong>File Handling:</strong> Java provides classes for file operations. For example, to read a file:</p>\n<pre><code>import java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.Scanner;\n\npublic class ReadFile {\n    public static void main(String[] args) {\n        try {\n            File file = new File(\"example.txt\");\n            Scanner scanner = new Scanner(file);\n            while (scanner.hasNextLine()) {\n                String data = scanner.nextLine();\n                System.out.println(data);\n            }\n            scanner.close();\n        } catch (FileNotFoundException e) {\n            System.out.println(\"An error occurred.\");\n            e.printStackTrace();\n        }\n    }\n}</code></pre>\n<p><strong>Byte Streams and Character Streams:</strong> Java I/O is divided into byte streams (for handling binary data) and character streams (for handling character data):</p>\n<pre><code>// Byte Stream Example\nFileInputStream fis = new FileInputStream(\"example.txt\");\nint i = fis.read();\nSystem.out.print((char)i);\nfis.close();\n\n// Character Stream Example\nFileReader fr = new FileReader(\"example.txt\");\nint j = fr.read();\nSystem.out.print((char)j);\nfr.close();</code></pre>\n<p><strong>Serialization and Deserialization:</strong> Serialization is the process of converting an object into a byte stream, and deserialization is the reverse process:</p>\n<pre><code>// Serialization Example\nFileOutputStream fileOut = new FileOutputStream(\"object.ser\");\nObjectOutputStream out = new ObjectOutputStream(fileOut);\nout.writeObject(object);\nout.close();\nfileOut.close();\n\n// Deserialization Example\nFileInputStream fileIn = new FileInputStream(\"object.ser\");\nObjectInputStream in = new ObjectInputStream(fileIn);\nMyClass object = (MyClass) in.readObject();\nin.close();\nfileIn.close();</code></pre>\n<p>Java I/O enables your programs to read and write data from various sources, making them more versatile and powerful.</p>\n<p><strong>Images:</strong></p>\n<p><img src='https://via.placeholder.com/150' alt='File Handling'></p>`
                                                    },
                                                    {
                                                        "id": 8,
                                                        "topic": "Multithreading in Java",
                                                        "description": "<h2>Multithreading in Java</h2>\n<p><strong>Introduction to Multithreading:</strong> Multithreading allows concurrent execution of two or more threads, enabling better utilization of CPU resources.</p>\n<p><strong>Creating Threads:</strong> There are two main ways to create threads in Java:</p>\n<ul>\n<li>By extending the <code>Thread</code> class:</li>\n<pre><code>class MyThread extends Thread {\n    public void run() {\n        System.out.println(\"Thread is running\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        MyThread thread = new MyThread();\n        thread.start();\n    }\n}</code></pre>\n<li>By implementing the <code>Runnable</code> interface:</li>\n<pre><code>class MyRunnable implements Runnable {\n    public void run() {\n        System.out.println(\"Thread is running\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Thread thread = new Thread(new MyRunnable());\n        thread.start();\n    }\n}</code></pre>\n</ul>\n<p><strong>Thread Life Cycle:</strong> A thread can be in one of the following states: New, Runnable, Blocked, Waiting, Timed Waiting, or Terminated.</p>\n<p><strong>Synchronization:</strong> Synchronization ensures that only one thread can access a resource at a time:</p>\n<pre><code>class Counter {\n    private int count = 0;\n\n    public synchronized void increment() {\n        count++;\n    }\n\n    public int getCount() {\n        return count;\n    }\n}</code></pre>\n<p><strong>Inter-thread Communication:</strong> Threads can communicate with each other using <code>wait()</code>, <code>notify()</code>, and <code>notifyAll()</code> methods:</p>\n<pre><code>class SharedResource {\n    synchronized void waitForNotification() throws InterruptedException {\n        wait();\n    }\n\n    synchronized void sendNotification() {\n        notify();\n    }\n}</code></pre>\n<p>Multithreading enhances the performance and responsiveness of Java applications, especially in complex and resource-intensive tasks.</p>\n<p><strong>Images:</strong></p>\n<p><img src='https://via.placeholder.com/150' alt='Thread Life Cycle'></p>"
                                                    },
                                                    {
                                                        "id": 9,
                                                        "topic": "Java Collections Framework",
                                                        "description": "<h2>Java Collections Framework</h2>\n<p><strong>Introduction to Collections:</strong> The Java Collections Framework provides a set of classes and interfaces to handle collections of objects. It includes various data structures like lists, sets, and maps.</p>\n<p><strong>Common Interfaces:</strong> The main interfaces of the Collections Framework are:</p>\n<ul>\n<li><strong>List:</strong> An ordered collection that allows duplicates (e.g., <code>ArrayList</code>, <code>LinkedList</code>).</li>\n<li><strong>Set:</strong> A collection that does not allow duplicates (e.g., <code>HashSet</code>, <code>TreeSet</code>).</li>\n<li><strong>Map:</strong> A collection of key-value pairs (e.g., <code>HashMap</code>, <code>TreeMap</code>).</li>\n<li><strong>Queue:</strong> A collection that represents a queue (e.g., <code>PriorityQueue</code>, <code>LinkedList</code>).</li>\n</ul>\n<p><strong>Example of Using ArrayList:</strong></p>\n<pre><code>import java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();\n        list.add(\"Apple\");\n        list.add(\"Banana\");\n        list.add(\"Cherry\");\n        System.out.println(list);\n    }\n}</code></pre>\n<p><strong>Iterator Interface:</strong> The <code>Iterator</code> interface provides methods to traverse collections:</p>\n<pre><code>import java.util.ArrayList;\nimport java.util.Iterator;\n\npublic class Main {\n    public static void main(String[] args) {\n        ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();\n        list.add(\"Apple\");\n        list.add(\"Banana\");\n        list.add(\"Cherry\");\n        Iterator&lt;String&gt; iterator = list.iterator();\n        while (iterator.hasNext()) {\n            System.out.println(iterator.next());\n        }\n    }\n}</code></pre>\n<p>Understanding and using the Java Collections Framework allows you to handle data more efficiently and write cleaner, more maintainable code.</p>\n<p><strong>Images:</strong></p>\n<p><img src='https://via.placeholder.com/150' alt='Java Collections'></p>"
                                                    },
                                                    {
                                                        "id": 10,
                                                        "topic": "Generics in Java",
                                                        "description": "<h2>Generics in Java</h2>\n<p><strong>Introduction to Generics:</strong> Generics enable types (classes and interfaces) to be parameters when defining classes, interfaces, and methods. This allows for type safety and reduces the risk of runtime errors.</p>\n<p><strong>Generic Class Example:</strong></p>\n<pre><code>public class Box&lt;T&gt; {\n    private T content;\n\n    public void setContent(T content) {\n        this.content = content;\n    }\n\n    public T getContent() {\n        return content;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Box&lt;String&gt; stringBox = new Box&lt;&gt;();\n        stringBox.setContent(\"Hello\");\n        System.out.println(stringBox.getContent());\n    }\n}</code></pre>\n<p><strong>Generic Method Example:</strong></p>\n<pre><code>public class Main {\n    public static &lt;T&gt; void printArray(T[] array) {\n        for (T element : array) {\n            System.out.println(element);\n        }\n    }\n\n    public static void main(String[] args) {\n        Integer[] intArray = {1, 2, 3, 4, 5};\n        String[] strArray = {\"A\", \"B\", \"C\"};\n        printArray(intArray);\n        printArray(strArray);\n    }\n}</code></pre>\n<p><strong>Bounded Types:</strong> You can restrict the types that can be used as type arguments:</p>\n<pre><code>public class Main {\n    public static &lt;T extends Number&gt; void printNumber(T number) {\n        System.out.println(number);\n    }\n\n    public static void main(String[] args) {\n        printNumber(10); // Integer\n        printNumber(10.5); // Double\n    }\n}</code></pre>\n<p>Generics provide a way to reuse code with different data types, making your programs more flexible and type-safe.</p>\n<p><strong>Images:</strong></p>\n<p><img src='https://via.placeholder.com/150' alt='Generic Classes'></p>"
                                                    },
                                                    {
                                                        "id": 11,
                                                        "topic": "Java Database Connectivity (JDBC)",
                                                        "description": "<h2>Java Database Connectivity (JDBC)</h2>\n<p><strong>Introduction to JDBC:</strong> JDBC is an API that allows Java applications to interact with relational databases. It provides methods for querying and updating data in a database.</p>\n<p><strong>Steps to Connect to a Database:</strong></p>\n<ol>\n<li><strong>Load the JDBC Driver:</strong> Use <code>Class.forName()</code> to load the driver class.</li>\n<li><strong>Establish a Connection:</strong> Use <code>DriverManager.getConnection()</code> to establish a connection to the database.</li>\n<li><strong>Create a Statement:</strong> Use <code>Connection.createStatement()</code> to create a statement object.</li>\n<li><strong>Execute Queries:</strong> Use <code>Statement.executeQuery()</code> to execute a query and retrieve results.</li>\n<li><strong>Close the Connection:</strong> Close the connection, statement, and result set objects to free up resources.</li>\n</ol>\n<p><strong>Example:</strong></p>\n<pre><code>import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.Statement;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            Class.forName(\"com.mysql.cj.jdbc.Driver\");\n            Connection con = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/mydatabase\", \"user\", \"password\");\n            Statement stmt = con.createStatement();\n            ResultSet rs = stmt.executeQuery(\"SELECT * FROM mytable\");\n            while (rs.next()) {\n                System.out.println(rs.getInt(1) + \" \" + rs.getString(2));\n            }\n            rs.close();\n            stmt.close();\n            con.close();\n        } catch (Exception e) {\n            System.out.println(e);\n        }\n    }\n}</code></pre>\n<p>JDBC enables your Java applications to perform database operations such as retrieving, inserting, updating, and deleting data.</p>\n<p><strong>Images:</strong></p>\n<p><img src='https://via.placeholder.com/150' alt='JDBC Connection'></p>"
                                                    },
                                                    {
                                                        "id": 12,
                                                        "topic": "Java Networking",
                                                        "description": "<h2>Java Networking</h2>\n<p><strong>Introduction to Networking in Java:</strong> Java provides a set of classes and interfaces for networking, allowing programs to communicate over networks like the internet.</p>\n<p><strong>Working with URLs:</strong> The <code>URL</code> class represents a Uniform Resource Locator, a pointer to a \"resource\" on the web:</p>\n<pre><code>import java.net.*;\nimport java.io.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            URL url = new URL(\"http://www.example.com\");\n            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n            String inputLine;\n            while ((inputLine = in.readLine()) != null) {\n                System.out.println(inputLine);\n            }\n            in.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}</code></pre>\n<p><strong>Socket Programming:</strong> Sockets provide the communication mechanism between two computers using TCP:</p>\n<ul>\n<li><strong>Client Side:</strong></li>\n<pre><code>import java.io.*;\nimport java.net.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            Socket socket = new Socket(\"localhost\", 6666);\n            DataOutputStream out = new DataOutputStream(socket.getOutputStream());\n            out.writeUTF(\"Hello Server\");\n            out.flush();\n            out.close();\n            socket.close();\n        } catch (Exception e) {\n            System.out.println(e);\n        }\n    }\n}</code></pre>\n<li><strong>Server Side:</strong></li>\n<pre><code>import java.io.*;\nimport java.net.*;\n\npublic class Server {\n    public static void main(String[] args) {\n        try {\n            ServerSocket serverSocket = new ServerSocket(6666);\n            Socket socket = serverSocket.accept();\n            DataInputStream in = new DataInputStream(socket.getInputStream());\n            String message = in.readUTF();\n            System.out.println(\"Client says: \" + message);\n            serverSocket.close();\n        } catch (Exception e) {\n            System.out.println(e);\n        }\n    }\n}</code></pre>\n</ul>\n<p><strong>Datagram Sockets:</strong> Used for sending and receiving data packets using UDP:</p>\n<pre><code>import java.net.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            DatagramSocket socket = new DatagramSocket();\n            String message = \"Hello\";\n            byte[] buffer = message.getBytes();\n            InetAddress address = InetAddress.getByName(\"localhost\");\n            DatagramPacket packet = new DatagramPacket(buffer, buffer.length, address, 1234);\n            socket.send(packet);\n            socket.close();\n        } catch (Exception e) {\n            System.out.println(e);\n        }\n    }\n}</code></pre>\n<p>Java networking enables your applications to communicate over networks, facilitating tasks such as accessing web resources and building client-server applications.</p>\n<p><strong>Images:</strong></p>\n<p><img src='https://via.placeholder.com/150' alt='Networking Diagram'></p>"
                                                    },
                                                    {
                                                        "id": 13,
                                                        "topic": "Java Design Patterns",
                                                        "description": "<h2>Java Design Patterns</h2>\n<p><strong>Introduction to Design Patterns:</strong> Design patterns are proven solutions to common software design problems. They can be categorized into three types: creational, structural, and behavioral patterns.</p>\n<p><strong>Creational Patterns:</strong> Deal with object creation mechanisms:</p>\n<ul>\n<li><strong>Singleton:</strong> Ensures a class has only one instance and provides a global point of access to it:</p>\n<pre><code>public class Singleton {\n    private static Singleton instance;\n\n    private Singleton() {}\n\n    public static Singleton getInstance() {\n        if (instance == null) {\n            instance = new Singleton();\n        }\n        return instance;\n    }\n}</code></pre>\n<li><strong>Factory Method:</strong> Defines an interface for creating an object, but lets subclasses alter the type of objects that will be created:</p>\n<pre><code>abstract class Shape {\n    abstract void draw();\n}\n\nclass Circle extends Shape {\n    void draw() {\n        System.out.println(\"Drawing Circle\");\n    }\n}\n\nclass Square extends Shape {\n    void draw() {\n        System.out.println(\"Drawing Square\");\n    }\n}\n\nabstract class ShapeFactory {\n    abstract Shape createShape();\n}\n\nclass CircleFactory extends ShapeFactory {\n    Shape createShape() {\n        return new Circle();\n    }\n}\n\nclass SquareFactory extends ShapeFactory {\n    Shape createShape() {\n        return new Square();\n    }\n}</code></pre>\n</ul>\n<p><strong>Structural Patterns:</strong> Deal with object composition:</p>\n<ul>\n<li><strong>Adapter:</strong> Allows incompatible interfaces to work together:</p>\n<pre><code>interface MediaPlayer {\n    void play(String audioType, String fileName);\n}\n\nclass MediaAdapter implements MediaPlayer {\n    AdvancedMediaPlayer advancedMusicPlayer;\n\n    MediaAdapter(String audioType) {\n        if (audioType.equalsIgnoreCase(\"vlc\")) {\n            advancedMusicPlayer = new VlcPlayer();\n        } else if (audioType.equalsIgnoreCase(\"mp4\")) {\n            advancedMusicPlayer = new Mp4Player();\n        }\n    }\n\n    public void play(String audioType, String fileName) {\n        if (audioType.equalsIgnoreCase(\"vlc\")) {\n            advancedMusicPlayer.playVlc(fileName);\n        } else if (audioType.equalsIgnoreCase(\"mp4\")) {\n            advancedMusicPlayer.playMp4(fileName);\n        }\n    }\n}</code></pre>\n<li><strong>Decorator:</strong> Adds new functionality to an object dynamically:</p>\n<pre><code>interface Shape {\n    void draw();\n}\n\nclass Rectangle implements Shape {\n    public void draw() {\n        System.out.println(\"Shape: Rectangle\");\n    }\n}\n\nabstract class ShapeDecorator implements Shape {\n    protected Shape decoratedShape;\n\n    ShapeDecorator(Shape decoratedShape) {\n        this.decoratedShape = decoratedShape;\n    }\n\n    public void draw() {\n        decoratedShape.draw();\n    }\n}\n\nclass RedShapeDecorator extends ShapeDecorator {\n    RedShapeDecorator(Shape decoratedShape) {\n        super(decoratedShape);\n    }\n\n    public void draw() {\n        decoratedShape.draw();\n        setRedBorder(decoratedShape);\n    }\n\n    private void setRedBorder(Shape decoratedShape) {\n        System.out.println(\"Border Color: Red\");\n    }\n}</code></pre>\n</ul>\n<p><strong>Behavioral Patterns:</strong> Deal with object interaction and responsibility:</p>\n<ul>\n<li><strong>Observer:</strong> Defines a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically:</p>\n<pre><code>import java.util.ArrayList;\nimport java.util.List;\n\nclass Subject {\n    private List<Observer> observers = new ArrayList<>();\n    private int state;\n\n    public int getState() {\n        return state;\n    }\n\n    public void setState(int state) {\n        this.state = state;\n        notifyAllObservers();\n    }\n\n    public void attach(Observer observer) {\n        observers.add(observer);\n    }\n\n    public void notifyAllObservers() {\n        for (Observer observer : observers) {\n            observer.update();\n        }\n    }\n}\n\nabstract class Observer {\n    protected Subject subject;\n    abstract void update();\n}\n\nclass ConcreteObserver extends Observer {\n    public ConcreteObserver(Subject subject) {\n        this.subject = subject;\n        this.subject.attach(this);\n    }\n\n    public void update() {\n        System.out.println(\"State changed to: \" + subject.getState());\n    }\n}</code></pre>\n</ul>\n<p>Understanding and applying design patterns helps in building robust, maintainable, and scalable software solutions.</p>\n<p><strong>Images:</strong></p>\n<p><img src='https://via.placeholder.com/150' alt='Design Patterns'></p>"
                                                    }
        ]
    }